p1
p1 <- ggplot(data=training, aes(x=cutWage, y=age, fill=cutWage)) + geom_boxplot()
p1
p1 <- ggplot(data=training, aes(x=cutWage, y=age, color=cutWage)) + geom_boxplot()
p1
p1 <- ggplot(data=training, aes(x=cutWage, y=age, fill=cutWage)) + geom_boxplot() + geom_point()
p1
p1 <- ggplot(data=training, aes(x=cutWage, y=age, fill=cutWage)) + geom_boxplot() + geom_jitter()
p1
p2 <- ggplot(data=training, aes(x=wage, color=education)) + geom_density()
p2
library(caret)
library(kernlab)
data(spam)
set.seed(32323)
inTrain <- createDataPartition(y=spam$type, p=0.7, list=FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
View(training)
p1 <- ggplot(data=training, aes(x=capitalAve)) + geom_histogram() + ggtitle(" ") +xlab("Capital Avg. per length")
p1
trainCapAve <- training$capitalAve
trainCapAves <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAves)
sd(trainCapAves)
testCapAve <- testing$capitalAve
testCapAves <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAves)
sd(testCapAves)
set.seed(32343)
modelFit <- train(type~., data=training, preProcess= c("center", "scale"), method="glm")
modelFit
spam$capitalAveSq <- spam$capitalAve^2
class(spam$capitalAveSq)
dim(spam)
VIew(spam)
View(spam)
smallspam <- spam[, c(32, 34)]
PC <- prcomp(smallspam)
library(caret)
library(kernlab)
library(ggplot2)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
View(training)
smallspam <- spam[, c(32, 34)]
PC <- prcomp(smallspam)
PC
View(PC)
View(PC$x)
library(caret)
library(ggplot2)
data(iris)
View(iris)
table(iris$Species)
set.seed(32343)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modfit <- train(Species~., data=training, method="rpart")
modfit$
finalModel
table(training$Species)
modfit
confusionMatrix(training$Species, predict(modfit, testing))
confusionMatrix(training$Species, predict(modfit, testing[, -5]))
predict(modfit, training)
confusionMatrix(training$Species, predict(modfit, training[, -5]))
confusionMatrix(training$Species, predict(modfit, training))
fancyRpartPlot(modfit)
library(rattle)
fancyRpartPlot(modfit)
fancyRpartPlot(modfit$finalModel)
install.packages("rpart.plot")
predictions <- predict(modfit, testing[, -5])
confusionMatrix(testing$Species, predictions)
?loess
install.packages("ElemStatLearn")
source('~/.active-rstudio-document')
loess1 <- loess(temperature~ozone, data=ozone, span=0.2)
loess1
summary(loess1)
View(iris)
library(caret)
library(ggplot2)
library(ElemStatLearn)
library(ISLR)
data(Wage)
View(Wage)
Wage <- subset(Wage, select=-c(logwage))
inBuild <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
validation <- Wage[-inBuild, ]
train <- Wage[inBuild, ]
inTrain <- createDataPartition(y=train$wage, p=0.7, list=FALSE)
training <- train[inTrain, ]
testing <- train[-inTrain, ]
dim(training)
dim(testing)
dim(validation)
?train
mod1 <- train(wage~., data=training, method="glm")
mod2 <- train(wage~., data=training, method="rf", trControl = trainControl("cv"), number=3)
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
qplot(pred1, pred2, color=wage, data=testing)
qplot(pred1, pred2)
qplot(pred1, pred2, color=wage)
qplot(pred1, pred2, data=testing)
predDF <- data.frame(pred1, pred2, wage=testing$wage)
combModfit <- train(wage~., method="gam", data=predDF)
combPred <- predict(combModfit, predDF)
e1 <- sqrt(sum((pred1-testing$wage)^2))
e2 <- sqrt(sum((pred2-testing$wage)^2))
e3 <- sqrt(sum((combPred-testing$wage)^2))
e1
e2
e3
pred1
mod1
summary(mod1)
predV1 <- predict(mod1, validation)
predV2 <- predict(mod2, validation)
predVDF <- data.frame(pred1=predV1, pred2=predV2)
combPredV <- predict(combModfit, predVDF)
e1 <- sqrt(sum((predV1-validation$wage)^2))
e2 <- sqrt(sum((predV2-validation$wage)^2))
e3 <- sqrt(sum((combPredV-validation$wage)^2))
e1
e2
e3
library(caret)
library(ggplot2)
data(iris)
View(iris)
inTrain <- createDataPartition(y=type$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training)
dim(testing)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dim(training)
dim(testing)
table(iris$Species)
table(training$Species)
table(testing$Species)
training <- subset(training, select=-c(Species))
kMeans1 <- kmeans(training, centers = 3)
kMeans1
training$clusters <- kMeans1$cluster
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
?qplot
source('~/.active-rstudio-document')
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
source('~/.active-rstudio-document')
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
source('~/.active-rstudio-document')
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
table(kMeans1$cluster, training$Species)
source('~/.active-rstudio-document')
qplot(Petal.Width, Petal.Length, data=training1, color=clusters)
table(kMeans1$cluster, training$Species)
table(training$Species, kMeans1$cluster)
table(training$Species, kMeans1$clusters)
table(training$Species, training1$clusters)
library(caret)
library(ggplot2)
data(iris)
View(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
dim(training)
dim(testing)
training1 <- subset(training, select=-c(Species))
kMeans1 <- kmeans(training1, centers = 3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width, Petal.Length, data=trsaining, color=clusters)
qplot(Petal.Width, Petal.Length, data=tsraining, color=clusters)
qplot(Petal.Width, Petal.Length, data=training, color=clusters)
View(training)
table(training$Species, training$clusters)
table(Species, clusters, data=training)
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
head(train)
head(test)
str(train)
str(test)
summary(head)
dim(train)
summary(train)
dim(train)
dim(test)
?prop.table
m <- matrix(1:4, 2)
m
prop.table(m, 1)
prop.table(m, 2)
View(train)
train$lucky <- NA
source('~/.active-rstudio-document')
View(train)
library(caret)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
library(rpart)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
fancyRpartPlot(my_tree_two)
m1 <- train(Survived~., data = training, method = "rpart")
m2 <- train(Survived~., data = training, method = "rf")
m1 <- train(Survived~., data = train, method = "rpart")
m2 <- train(Survived~., data = train, method = "rf")
m1 <- train(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "rpart")
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
m1 <- train(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "rpart")
my_prediction <- predict(my_tree_two, newdata=test, type="class")
my_prediction
my_prediction <- predict(my_tree_two, newdata=test)
my_prediction
m1 <- train(Survived~Sex, data = train, method = "rpart")
m1
m1 <- train(Survived~Pclass, data = train, method = "rpart")
m1 <- train(Survived~Pclass + Sex, data = train, method = "rpart")
m1 <- train(Survived~Pclass + Sex + Age, data = train, method = "rpart")
m1 <- train(Survived~Pclass + Sex + SibSp, data = train, method = "rpart")
m2 <- train(Survived~Pclass + Sex + SibSp + Parch + Fare + Embarked, data = train, method = "rf")
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method= "class", control=rpart.control(minsplit=50, cp=0))
fancyRpartPlot(my_tree_three)
super_model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method= "class", control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(super_model)
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method= "class", control=rpart.control(minsplit=50, cp=4))
fancyRpartPlot(my_tree_three)
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method= "class", control=rpart.control(minsplit=50, cp=0))
fancyRpartPlot(my_tree_three)
?rpart.control
dim(train)
dim(test)
install.packages("randomForest")
?varImpPlot
library(randomForest)
?varImpPlot
set.seed(4543)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
varImpPlot(mtcars.rf)
setwd("F:/DA Projects/Kaggle/Bike Sharing")
setwd("F:/DA Projects/Kaggle/Bike Sharing")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
View(train)
View(test)
rbind(train, test)
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
str(data_all)
dim(data_all)
table(data_all$season)
table(data_all$holiday)
table(data_all$workingday)
table(data_all$weather)
table(data_all$temp)
summary(data_all$windspeed)
table(data_all$windspeed)
str(data_all$windspeed)
summary(data_all$holiday)
str(data_all$holiday)
is.na(data_all)
table(is.na(data_all))
dim(data_all)
17379*12
data_all[1]$datetime
data_all$datetime[1]
?as.Date
?as.POSIXct
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
table(is.na(data_all))
data_all$season <- as.factor(data_all$season)
?as.POSIXct
as.POSIXlt(data_all$datetime[1])
as.POSIXlt(data_all$datetime[1], format = "%m/%d/%y %H:%M")
data_all$datetime[1]
as.POSIXlt(data_all$datetime[1], format = "%m/%d/%Y %H:%M")
as.POSIXlt(data_all$datetime[45], format = "%m/%d/%Y %H:%M")
as.POSIXlt(data_all$datetime[2], format = "%m/%d/%Y %H:%M")
unclass(as.POSIXlt(data_all$datetime[2], format = "%m/%d/%Y %H:%M"))
unclass(as.POSIXlt(data_all$datetime[45], format = "%m/%d/%Y %H:%M"))
t <- Sys.time()
unlist(as.POSIXlt(t))
Dates <- as.POSIXlt(data_all$datetime, format = "%m/%d/%Y %H:%M")
Dates[1:45]
Unlist(Dates[1])
unlist(Dates[1])
data_all$date <- Dates$"mday"
str(data_all$date)
class(data_all$date)
data_all$hour <- Dates$"hour"
data_all$month <- Dates$"mon"
data_all$year <- 1900 + Dates$"year"
str(data_all$year)
table(data_all$year)
hist(data$season)
hist(data$weather)
hist(data$humidity)
hist(data$holiday)
hist(data$workingday)
hist(data$temp)
hist(data$atemp)
hist(data$windspeed)
hist(data$season)
par(mfrow=c(4,2))
par(mar = rep(2, 4))
hist(data$season)
?hist
library("graphics", lib.loc="C:/Program Files/R/R-3.3.1/library")
library(ggplot2)
library(graphics)
library(caret)
library(randomForest)
hist(data$season)
hist(data$weather)
hist(data$humidity)
hist(data$holiday)
hist(data$workingday)
hist(data$temp)
hist(data$atemp)
hist(data$windspeed)
library(graphics)
library("graphics", lib.loc="C:/Program Files/R/R-3.3.1/library")
hist(data$season)
hist(data_all$season)
ggplot(data= data_all, aes(x=season)) + geom_histogram()
setwd("F:/DA Projects/Kaggle/Bike Sharing")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
View(train)
View(test)
test$casual <- 0
test$registered <- 0
test$count <- 0
# combine train and test data
data_all <- rbind(train, test)
View(data_all)
str(data_all)
# check for missing values
table(is.na(data_all))
hist(data_all$season)
par(mfrow=c(4,2))
par(mar = rep(2, 4))
hist(data_all$season)
hist(data_all$weather)
hist(data_all$humidity)
hist(data_all$holiday)
hist(data_all$workingday)
hist(data_all$temp)
hist(data_all$atemp)
hist(data_all$windspeed)
# change categorical variables into factor
data_all$season <- as.factor(data_all$season)
data_all$holiday <- as.factor(data_all$holiday)
data_all$workingday <- as.factor(data_all$workingday)
data_all$weather <- as.factor(data_all$weather)
# date and hour extraction from datetime variable
Dates <- as.POSIXlt(data_all$datetime, format = "%m/%d/%Y %H:%M")
data_all$hour <- Dates$"hour"
data_all$date <- Dates$"mday"
# 0 for jan, 1 for feb and so on.. 11 for dec
data_all$month <- Dates$"mon"
data_all$year <- 1900 + Dates$"year"
ggplot(data_all, aes(season)) + geom_histogram()
setwd("F:/DA Projects/Kaggle/Bike Sharing")
library(ggplot2)
library(graphics)
library(caret)
library(randomForest)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
View(train)
View(test)
test$casual <- 0
test$registered <- 0
test$count <- 0
# combine train and test data
data_all <- rbind(train, test)
View(data_all)
str(data_all)
# check for missing values
table(is.na(data_all))
ggplot(data_all, aes(season)) + geom_histogram()
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
unlist(Dates[1])
data_all$weekday <- Dates$wday
# separate training and testing dataset
training <- data_all[data_all$date < 20, ]
testing <- data_all[data_all$date >= 20, ]
# hypothesis visualization
boxplot(training$count~training$hour,xlab="hour", ylab="count of total users")
boxplot(training$casual~training$hour,xlab="hour", ylab="casual users")
boxplot(training$registered~training$hour,xlab="hour", ylab="registered users")
par(mfrow=c(1,2))
# separate training and testing dataset
training <- data_all[data_all$date < 20, ]
testing <- data_all[data_all$date >= 20, ]
# hypothesis visualization
boxplot(training$count~training$hour,xlab="hour", ylab="count of total users")
boxplot(training$casual~training$hour,xlab="hour", ylab="casual users")
boxplot(training$registered~training$hour,xlab="hour", ylab="registered users")
par(mfrow=c(1,3))
# separate training and testing dataset
training <- data_all[data_all$date < 20, ]
testing <- data_all[data_all$date >= 20, ]
# hypothesis visualization
boxplot(training$count~training$hour,xlab="hour", ylab="count of total users")
boxplot(training$casual~training$hour,xlab="hour", ylab="casual users")
boxplot(training$registered~training$hour,xlab="hour", ylab="registered users")
boxplot(training$casual~training$weekday,xlab="hour", ylab="casual users")
boxplot(training$registered~training$weekday,xlab="hour", ylab="registered users")
par(mfrow = c(1,2))
boxplot(training$registered~training$weather,xlab="weather", ylab="registered users")
boxplot(training$casual~training$weather,xlab="weather", ylab="casual users")
boxplot(training$registered~training$temp,xlab="temp", ylab="registered users")
boxplot(training$casual~training$temp,xlab="temp", ylab="casual users")
boxplot(training$registered~training$year,xlab="year", ylab="registered users")
boxplot(training$casual~training$year,xlab="year", ylab="casual users")
boxplot(training$registered~training$windspeed,xlab="year", ylab="registered users")
boxplot(training$casual~training$windspeed,xlab="year", ylab="casual users")
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
boxplot(training$registered~training$humidity,xlab="humidity", ylab="registered users")
boxplot(training$casual~training$humidity,xlab="humidity", ylab="casual users")
par(mfrow =c(1,2))
boxplot(training$registered~training$humidity,xlab="humidity", ylab="registered users")
boxplot(training$casual~training$humidity,xlab="humidity", ylab="casual users")
library(rattle)
dt <- train(registered~hour, data = data_all, method = "rpart")
fancyRpartPlot(dt)
dt <- train(registered~hour, data = training, method = "rpart")
fancyRpartPlot(dt)
library(rpart.plot)
library(RColorBrewer)
dt <- train(registered~hour, data = training, method = "rpart")
fancyRpartPlot(dt)
View(training)
d <- rpart(registered~hour, training)
fancyRpartPlot(d)
dt <- train(registered~hour, data = training, method = "rpart")
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
View(training)
fancyRpartPlot(dt1)
par(mfrow = c(1,1))
fancyRpartPlot(dt1)
dt2 <- rpart(casual~hour, data= training)
fancyRpartPlot(dt2)
t1 <- rpart(registered~temp, data = training)
fancyRpartPlot(t1)
t2 <- rpart(casual~atemp, data= training)
fancyRpartPlot(t2)
t1 <- rpart(registered~temp, data = training)
fancyRpartPlot(t1)
t2 <- rpart(casual~temp, data= training)
fancyRpartPlot(t2)
table(data_all$windspeed ==0)
data_all$date <- as.factor(data_all$date)
data_all$date <- as.factor(data_all$date)
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
data_all$hour <- as.factor(data_all$hour)
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
training <- data_all[as.numeric(as.character(data_all$date)) < 20, ]
testing <- data_all[as.numeric(as.character(data_all$date)) >= 20, ]
View(data_all)
View(training)
source('F:/DA Projects/Kaggle/Bike Sharing/BikeSharing.R')
View(data_all)
View(training)
training$reg1=training$registered+1
training$cas1=training$casual+1
training$logcas=log(training$cas1)
training$logreg=log(training$reg1)
testing$logreg=0
testing$logcas=0
boxplot(training$logreg~train$weather,xlab="weather", ylab="registered users")
boxplot(training$logreg~train$season,xlab="season", ylab="registered users")
modfit_reg <- randomForest(logreg ~ hour +workingday+date+holiday+ month+ daytype +tb_reg+humidity+atemp+windspeed+season+weather+dp_reg+year+tp, data=training,importance=TRUE, ntree=500)
predictions_reg <- predict(modfit_reg, testing)
testing$logreg <- predictions_reg
modfit_cas <- randomForest(logcas ~hour + daytype+date+month +humidity+atemp+tb_cas+windspeed+season+weather+holiday+workingday+dp_cas+year+tp, data=training,importance=TRUE, ntree=500)
predictions_cas <- predict(modfit_cas,testing)
testing$logcas <- predictions_cas
testing$registered <- exp(testing$logreg)-1
testing$casual <- exp(testing$logcas)-1
testing$count <- testing$casual+testing$registered
solution <- data.frame(datetime=testing$datetime,count=testing$count)
write.csv(solution,file="solution.csv",row.names=FALSE)
View(testing)
testing$count <- testing$casual+testing$registered
View(testing)
View(testing)
test <- read.csv("sampleSubmission.csv", header=T)
View(test)
